// Generated by gencpp from file opencamera/value.msg
// DO NOT EDIT!


#ifndef OPENCAMERA_MESSAGE_VALUE_H
#define OPENCAMERA_MESSAGE_VALUE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace opencamera
{
template <class ContainerAllocator>
struct value_
{
  typedef value_<ContainerAllocator> Type;

  value_()
    : hue_max(0)
    , hue_min(0)
    , saturation_max(0)
    , saturation_min(0)
    , value_max(0)
    , value_min(0)  {
    }
  value_(const ContainerAllocator& _alloc)
    : hue_max(0)
    , hue_min(0)
    , saturation_max(0)
    , saturation_min(0)
    , value_max(0)
    , value_min(0)  {
  (void)_alloc;
    }



   typedef int32_t _hue_max_type;
  _hue_max_type hue_max;

   typedef int32_t _hue_min_type;
  _hue_min_type hue_min;

   typedef int32_t _saturation_max_type;
  _saturation_max_type saturation_max;

   typedef int32_t _saturation_min_type;
  _saturation_min_type saturation_min;

   typedef int32_t _value_max_type;
  _value_max_type value_max;

   typedef int32_t _value_min_type;
  _value_min_type value_min;





  typedef boost::shared_ptr< ::opencamera::value_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::opencamera::value_<ContainerAllocator> const> ConstPtr;

}; // struct value_

typedef ::opencamera::value_<std::allocator<void> > value;

typedef boost::shared_ptr< ::opencamera::value > valuePtr;
typedef boost::shared_ptr< ::opencamera::value const> valueConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::opencamera::value_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::opencamera::value_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::opencamera::value_<ContainerAllocator1> & lhs, const ::opencamera::value_<ContainerAllocator2> & rhs)
{
  return lhs.hue_max == rhs.hue_max &&
    lhs.hue_min == rhs.hue_min &&
    lhs.saturation_max == rhs.saturation_max &&
    lhs.saturation_min == rhs.saturation_min &&
    lhs.value_max == rhs.value_max &&
    lhs.value_min == rhs.value_min;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::opencamera::value_<ContainerAllocator1> & lhs, const ::opencamera::value_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace opencamera

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::opencamera::value_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::opencamera::value_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::opencamera::value_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::opencamera::value_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::opencamera::value_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::opencamera::value_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::opencamera::value_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c7de79ccfc65fcdf3851b36608861350";
  }

  static const char* value(const ::opencamera::value_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc7de79ccfc65fcdfULL;
  static const uint64_t static_value2 = 0x3851b36608861350ULL;
};

template<class ContainerAllocator>
struct DataType< ::opencamera::value_<ContainerAllocator> >
{
  static const char* value()
  {
    return "opencamera/value";
  }

  static const char* value(const ::opencamera::value_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::opencamera::value_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 hue_max\n"
"int32 hue_min\n"
"int32 saturation_max\n"
"int32 saturation_min\n"
"int32 value_max\n"
"int32 value_min                                                 \n"
;
  }

  static const char* value(const ::opencamera::value_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::opencamera::value_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.hue_max);
      stream.next(m.hue_min);
      stream.next(m.saturation_max);
      stream.next(m.saturation_min);
      stream.next(m.value_max);
      stream.next(m.value_min);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct value_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::opencamera::value_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::opencamera::value_<ContainerAllocator>& v)
  {
    s << indent << "hue_max: ";
    Printer<int32_t>::stream(s, indent + "  ", v.hue_max);
    s << indent << "hue_min: ";
    Printer<int32_t>::stream(s, indent + "  ", v.hue_min);
    s << indent << "saturation_max: ";
    Printer<int32_t>::stream(s, indent + "  ", v.saturation_max);
    s << indent << "saturation_min: ";
    Printer<int32_t>::stream(s, indent + "  ", v.saturation_min);
    s << indent << "value_max: ";
    Printer<int32_t>::stream(s, indent + "  ", v.value_max);
    s << indent << "value_min: ";
    Printer<int32_t>::stream(s, indent + "  ", v.value_min);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OPENCAMERA_MESSAGE_VALUE_H
